stop("'n' has to be a positive integer")
} else if(n != abs(round(n))){ #checks if n is a natural number
stop("'n' has to be a positive integer")
}
#Now we check that x is a vector, which requires us to check that it is not a
#matrix, or list. We also check that all content in x is numeric.
if(!is.vector(x) || is.matrix(x) || is.list(x) || !is.numeric(x)){
stop("'x' has to be a vector of numbers.(Non list, non matrix)")
xIsVector <- FALSE
}
#We check the same for y
if(!is.vector(y) || is.matrix(y) || is.list(y) || !is.numeric(y)){
stop("'y' has to be a vector of numbers.(Non list, non matrix)")
yIsVector <- FALSE
}
if(xIsVector == TRUE && yIsVector == TRUE){ #If either x or y isnt a vector, we cant check this
if(length(x) != length(y)){ #We check if x and y has same length
stop("'x' and 'y' has to be of the same length.")
}
}
if(!is.logical(plot) || length(plot) != 1){ #We check that plot is logical and a single value
stop("'plot' has to be a TRUE or FALSE statement.")
}
#------------------------------------------------------------
correlation <- cor(x,y) #First get the true correlation
N <- length(x) #we set N
storage <- numeric(n) #We make space for n correlation estimates
for (i in 1:n){
j <- sample(1:N, size = N, replace = TRUE) #This sample is just a list of "slots" we want to take from in x and y
xSample <- x[j] #Sample from x
ySample <- y[j] #Sample from y
storage[i] <- cor(xSample,ySample) #Estimate the correlation
}
BootstrapCor <- mean(storage) #We get the mean of the estimates
se <- sd(storage) #standard deviation of correlations is in fact standard error
bias <- mean(storage) - correlation #Estimate bias
alpha <- 0.05 #alpha is set for a 95% confidence interval
value <- round(qnorm(1-alpha/2),digits=2) #"value" is z
CI <- c(BootstrapCor - value*se, BootstrapCor + value*se) #Confidence interval given in a vector
#We save a list of returned values to easily work with if user is interested in specific values
returnedList <- list("TrueCor" = correlation, "BSCor" = BootstrapCor, "SE" = se, "Bias" = bias, "CI" = CI)
if(plot == TRUE){ #If user wants a histogram.
#Breaks are set in the smallest possible interval to optimize presentation
hist(storage, breaks=seq(round(min(storage),digits=2)-0.01,round(max(storage),digits=2)+0.01,0.01), main="Histogram of correlations", xlab="correlations")
abline(v = correlation, col="red") #True correlation
abline(v = CI[1], col="blue", lty=2) #Confidence interval 1
abline(v = CI[2], col="blue", lty=2) #Confidence interval 2
}
return(returnedList) #Finally, the list is returned.
}
bootstrap(c(1000,2),rnorm(29),c("derp","herp"),plot = "trains")
bootstrap(1000,rnorm(29),c("derp","herp"),plot = "trains")
bootstrap(1000,rnorm(29),c(1,2,3),plot = "trains")
bootstrap(1000,rnorm(30),rnorm(30),plot = "trains")
bootstrap(1000,rnorm(30),rnorm(30),plot = TRUE)
bootstrap(1000,rnorm(30),rnorm(30),plot = TRUE)
bootstrap(1000,rnorm(30),rnorm(30),plot = TRUE)
bootstrap(1000,rnorm(30),rnorm(30),plot = TRUE)
buffon.needle <- function(n = 10,l = 1,d = 1){
#Syntax Proccessing
#============================================================
if(is.matrix(n) || is.list(n) || length(n)!=1){ #Check that n is a single value
stop("'n' has to be a positive integer; length=1, non-list, non-matrix")
} else if(!is.numeric(n)){ #checks if n is a number
stop("'n' has to be a positive integer")
} else if(n != abs(round(n))){ #checks if n is a natural number
stop("'n' has to be a positive integer")
}
if(is.matrix(l) || is.list(l) || length(l)!=1){ #Check that l is a single value
stop("'l' has to be a positive integer; length=1, non-list, non-matrix")
} else if(!is.numeric(l)){ #checks if l is a number
stop("'l' has to be a positive number")
} else if(l != abs(l)){ #checks if l is a positive number
stop("'l' has to be a positive number")
}
#Check d is positive number
if(is.matrix(d) || is.list(d) || length(d)!=1){ #Check that d is a single value
stop("'d' has to be a positive integer; length=1, non-list, non-matrix")
} else if(!is.numeric(d)){ #checks if l is a number
stop("'d' has to be a positive number")
} else if(d != abs(d)){ #checks if l is a positive number
stop("'d' has to be a positive number")
}
#------------------------------------------------------------
h = 0                                      #Start with 0 hits
for(i in 1:n){
U <- runif(3)                            #Need 3 random variables for x, y and angle respectively
x <- d + 4*d*U[1]                        #This makes some empty space around the playing field
y <- d + 4*d*U[2]                        #same as above
Y <- l * sin(2*pi*U[3])                  #Determines the "height" of needle
Y2 = y %% d + Y                          #Used for determining a hit or miss
if(Y2 >= d || Y2 <= 0){                  #If Y2 is within area 0<Y2<3, then needle is between 2 parallel lines, but not hitting any
h = h + 1                              #If Y2 hits a parallel line, count it
}
}
return((2*l*n)/(d*h))
}
buffon.needle(10,1,1)
buffon.needle(10,1,1)
buffon.needle(10,1,1)
buffon.needle(10,1,1)
buffon.needle(10,1,1)
buffon.needle(3408,2.5,3)
buffon.needle(3408,2.5,3)
buffon.needle(3408,2.5,3)
buffon.needle(3408,2.5,3)
buffon.needle(3408,2.5,3)
buffon.needle(3408,2.5,c(1,2))
buffon.needle(3408,2.c(1,2),c(1,2))
buffon.needle(3408,2.c(1,2),c(1,2))
buffon.needle(3408,c(1,2),c(1,2))
buffon.needle(c(1,2),c(1,2),c(1,2))
chi.probability <- function(x,df = 1,n = 100){
#Syntax Processing
#============================================================
if(is.matrix(x) || is.list(x) || length(x)!=1){ #Check that x is a single value
stop("'x' has to be an integer; length=1, non-list, non-matrix")
} else if(!is.numeric(x)){ #checks if x is a number
stop("'x' has to be a number")
}
if(is.matrix(df) || is.list(df) || length(f)!=1){ #Check that df is a single value
stop("'df' has to be an integer; length=1, non-list, non-matrix")
} else if(!is.numeric(df)){ #checks if df is a number
stop("'df' has to be a positive integer")
} else if(df != abs(round(df))){ #checks if df is a positive integer
stop("'df' has to be a positive integer")
}
if(is.matrix(n) || is.list(n) || length(n)!=1){ #Check that n is a single value
stop("'n' has to be an integer; length=1, non-list, non-matrix")
} else if(!is.numeric(n)){ #checks if n is a number
stop("'n' has to be a positive integer")
} else if(n != abs(round(n))){ #checks if n is a positive integer
stop("'n' has to be a positive integer")
}
#------------------------------------------------------------
for (i in 1:length(x)){
variables <- rnorm(n*df)
matrixNumbers <- matrix(variables, c(n,df))
chi <- numeric()
for(i in 1:n){
chi[i] <- sum(matrixNumbers[i,]^2)
}
cdf <- ecdf(chi)
a <- cdf(x)
return(1-a)
}
}
chi.probability(-1,1,100)
chi.probability <- function(x,df = 1,n = 100){
#Syntax Processing
#============================================================
if(is.matrix(x) || is.list(x) || length(x)!=1){ #Check that x is a single value
stop("'x' has to be an integer; length=1, non-list, non-matrix")
} else if(!is.numeric(x)){ #checks if x is a number
stop("'x' has to be a number")
}
if(is.matrix(df) || is.list(df) || length(df)!=1){ #Check that df is a single value
stop("'df' has to be an integer; length=1, non-list, non-matrix")
} else if(!is.numeric(df)){ #checks if df is a number
stop("'df' has to be a positive integer")
} else if(df != abs(round(df))){ #checks if df is a positive integer
stop("'df' has to be a positive integer")
}
if(is.matrix(n) || is.list(n) || length(n)!=1){ #Check that n is a single value
stop("'n' has to be an integer; length=1, non-list, non-matrix")
} else if(!is.numeric(n)){ #checks if n is a number
stop("'n' has to be a positive integer")
} else if(n != abs(round(n))){ #checks if n is a positive integer
stop("'n' has to be a positive integer")
}
#------------------------------------------------------------
for (i in 1:length(x)){
variables <- rnorm(n*df)
matrixNumbers <- matrix(variables, c(n,df))
chi <- numeric()
for(i in 1:n){
chi[i] <- sum(matrixNumbers[i,]^2)
}
cdf <- ecdf(chi)
a <- cdf(x)
return(1-a)
}
}
chi.probability(-1,1,100)
chi.probability(-5,1,100)
chi.probability(-5,1,100)
chi.probability(-5,1,100)
chi.probability(1,1,100)
chi.probability(5,1,100)
chi.probability(7,1,100)
chi.probability(20,1,100)
chi.probability(20,5,100)
chi.probability(20,20,100)
chi.probability(17,20,100)
1-pchisq(17,20)
chi.probability(17,20,10000)
chi.probability(17,20,1000)
chi.probability(17,20,1000)
chi.probability(17,20,1000)
help(ecdf)
chi.probability <- function(x,df = 1,n = 100){
#Syntax Processing
#============================================================
if(is.matrix(x) || is.list(x) || length(x)!=1){ #Check that x is a single value
stop("'x' has to be an integer; length=1, non-list, non-matrix")
} else if(!is.numeric(x)){ #checks if x is a number
stop("'x' has to be a number")
}
if(is.matrix(df) || is.list(df) || length(df)!=1){ #Check that df is a single value
stop("'df' has to be an integer; length=1, non-list, non-matrix")
} else if(!is.numeric(df)){ #checks if df is a number
stop("'df' has to be a positive integer")
} else if(df != abs(round(df))){ #checks if df is a positive integer
stop("'df' has to be a positive integer")
}
if(is.matrix(n) || is.list(n) || length(n)!=1){ #Check that n is a single value
stop("'n' has to be an integer; length=1, non-list, non-matrix")
} else if(!is.numeric(n)){ #checks if n is a number
stop("'n' has to be a positive integer")
} else if(n != abs(round(n))){ #checks if n is a positive integer
stop("'n' has to be a positive integer")
}
#------------------------------------------------------------
for (i in 1:length(x)){
variables <- rnorm(n*df) #Generate the random variables for the matrix
matrixNumbers <- matrix(variables, c(n,df)) #Generate the matrix
chi <- numeric() #initialise chi
for(i in 1:n){ #Sum up each row in the matrix to get the chi values.
chi[i] <- sum(matrixNumbers[i,]^2)
}
cdf <- ecdf(chi) #Use the empirical cumulative distribution function
a <- cdf(x) #Now we look at the specific value for x, i.e. P(chi^2 < x)
return(1-a) #Return the probability 1-P(chi^2 < x) = P(chi^2 > x)
}
}
chi.probability(5,1,100)
pchisq(5,1)
chi.probability(5,1,100)
chi.probability(c(5,2),1,100)
chi.probability(5,c(1,2),100)
chi.probability(5,1,c(100,1))
a <- c(1,2,3,4,5,-1,-2)
a
a < 0
if(a < 0){print("yes")}
b <- (a<0)
b
b[b == TRUE]
length(b[b == TRUE]) >0
chi.gof <- function(x,p){
#Syntax Processing
#============================================================
#First we check if x is a vector of numbers
if(!is.vector(x) || is.matrix(x) || is.list(x) || !is.numeric(x)){
stop("'x' has to be a vector of numbers.(Non list, non matrix)")
}
if(missing(p)){ #If p is not used, probability is uniform
p <- rep((1/length(x)),length(x))
} else if(!is.vector(p) || is.matrix(p) || is.list(p) || !is.numeric(p)){
stop("'p' has to be a vector of numbers.(Non list, non matrix)") #If p exist, check it is a vector of numbers
} else if(length(p) == length(x)){
stop("'p' and 'x' has to be of the same length")
}
if(sum(p) != 1){
warning("Sum of p is not equal to 1, this may cause incorrect calculations.")
}
checker <- p<0
if(length(checker[checker == TRUE]) > 0){
warning("p contains negative values, this may cause incorrect calculations.")
}
#Warn user if p is negative or sum is outside 0-1
#------------------------------------------------------------
k <- length(x)
n <- sum(x)
return(Tt <- sum(((x - n*p)^2)/(n*p)))
}
a <- c(30,30,10,12,10,30,10,28,12,11,10,10,10,10,16,16,10,10,10,16)
b <- c(0.14,0.06,0.06,0.02,0.06,0.1,0.03,0.09,0.04,0.04,0.03,0.03,0.03,0.03,0.05,0.05,0.03,0.03,0.03,0.05)
b
a
chi.gof(a,b)
chi.gof <- function(x,p){
#Syntax Processing
#============================================================
#First we check if x is a vector of numbers
if(!is.vector(x) || is.matrix(x) || is.list(x) || !is.numeric(x)){
stop("'x' has to be a vector of numbers.(Non list, non matrix)")
}
if(missing(p)){ #If p is not used, probability is uniform
p <- rep((1/length(x)),length(x))
} else if(!is.vector(p) || is.matrix(p) || is.list(p) || !is.numeric(p)){
stop("'p' has to be a vector of numbers.(Non list, non matrix)") #If p exist, check it is a vector of numbers
} else if(length(p) == length(x)){
stop("'p' and 'x' has to be of the same length")
}
if(sum(p) != 1){
warning("Sum of p is not equal to 1, this may cause incorrect calculations.")
}
checker <- p<0
if(length(checker[checker == TRUE]) > 0){
warning("p contains negative values, this may cause incorrect calculations.")
}
#Warn user if p is negative or sum is outside 0-1
#------------------------------------------------------------
k <- length(x)
n <- sum(x)
return(Tt <- sum(((x - n*p)^2)/(n*p)))
}
chi.gof(a,b)
length(a)
length(b)
chi.gof <- function(x,p){
#Syntax Processing
#============================================================
#First we check if x is a vector of numbers
if(!is.vector(x) || is.matrix(x) || is.list(x) || !is.numeric(x)){
stop("'x' has to be a vector of numbers.(Non list, non matrix)")
}
if(missing(p)){ #If p is not used, probability is uniform
p <- rep((1/length(x)),length(x))
} else if(!is.vector(p) || is.matrix(p) || is.list(p) || !is.numeric(p)){
stop("'p' has to be a vector of numbers.(Non list, non matrix)") #If p exist, check it is a vector of numbers
} else if(length(p) != length(x)){
stop("'p' and 'x' has to be of the same length")
}
if(sum(p) != 1){
warning("Sum of p is not equal to 1, this may cause incorrect calculations.")
}
checker <- p<0
if(length(checker[checker == TRUE]) > 0){
warning("p contains negative values, this may cause incorrect calculations.")
}
#Warn user if p is negative or sum is outside 0-1
#------------------------------------------------------------
k <- length(x)
n <- sum(x)
return(Tt <- sum(((x - n*p)^2)/(n*p)))
}
chi.gof(a,b)
chi.gof <- function(x,p){
#Syntax Processing
#============================================================
#First we check if x is a vector of numbers
if(!is.vector(x) || is.matrix(x) || is.list(x) || !is.numeric(x)){
stop("'x' has to be a vector of numbers.(Non list, non matrix)")
}
if(missing(p)){ #If p is not used, probability is uniform
p <- rep((1/length(x)),length(x))
} else if(!is.vector(p) || is.matrix(p) || is.list(p) || !is.numeric(p)){
stop("'p' has to be a vector of numbers.(Non list, non matrix)") #If p exist, check it is a vector of numbers
} else if(length(p) != length(x)){
stop("'p' and 'x' has to be of the same length")
}
if(sum(p) != 1){
warning("Sum of p is not equal to 1, this may cause incorrect calculations.")
}
checker <- p<0
if(length(checker[checker == TRUE]) > 0){
warning("p contains negative values, this may cause incorrect calculations.")
}
#Warn user if p is negative or sum is outside 0-1
#------------------------------------------------------------
k <- length(x)
n <- sum(x)
return(sum(((x - n*p)^2)/(n*p)))
}
chi.gof(a,b)
chi.probability <- function(x,df = 1,n = 100){
#Syntax Processing
#============================================================
if(is.matrix(x) || is.list(x) || length(x)!=1){ #Check that x is a single value
stop("'x' has to be an integer; length=1, non-list, non-matrix")
} else if(!is.numeric(x)){ #checks if x is a number
stop("'x' has to be a number")
}
if(is.matrix(df) || is.list(df) || length(df)!=1){ #Check that df is a single value
stop("'df' has to be an integer; length=1, non-list, non-matrix")
} else if(!is.numeric(df)){ #checks if df is a number
stop("'df' has to be a positive integer")
} else if(df != abs(round(df))){ #checks if df is a positive integer
stop("'df' has to be a positive integer")
}
if(is.matrix(n) || is.list(n) || length(n)!=1){ #Check that n is a single value
stop("'n' has to be an integer; length=1, non-list, non-matrix")
} else if(!is.numeric(n)){ #checks if n is a number
stop("'n' has to be a positive integer")
} else if(n != abs(round(n))){ #checks if n is a positive integer
stop("'n' has to be a positive integer")
}
#------------------------------------------------------------
for (i in 1:length(x)){
variables <- rnorm(n*df) #Generate the random variables for the matrix
matrixNumbers <- matrix(variables, c(n,df)) #Generate the matrix
chi <- numeric() #initialise chi
for(i in 1:n){ #Sum up each row in the matrix to get the chi values.
chi[i] <- sum(matrixNumbers[i,]^2)
}
cdf <- ecdf(chi) #Use the empirical cumulative distribution function
a <- cdf(x) #Now we look at the specific value for x, i.e. P(chi^2 < x)
return(1-a) #Return the probability 1-P(chi^2 < x) = P(chi^2 > x)
}
}
chi.gof(a,b)
chi.probability(25.66007,19,100)
read.table("https://github.com/haghish/ST516/blob/master/data/soccer.txt")
header <- read.table("https://github.com/haghish/ST516/blob/master/data/soccer.txt", nrows = 1, header = FALSE, stringsAsFactors = FALSE)
header
read.table("https://raw.githubusercontent.com/haghish/ST516/master/data/gum.txt")
soccer <- read.table("https://raw.githubusercontent.com/haghish/ST516/master/data/gum.txt")
soccer$Players
soccer$Number
soccer$expected
roxygen2::roxygenise()
roxygen2::roxygenise()
library(roxygen2)
roxygen2::roxygenise()
library(roxygen2)
library(roxygen2)
roxygen2::roxygenise()
library(roxygen2)
roxygen2::roxygenise()
library(ChaijiExamST522)
roxygen2::roxygenise()
chi.gof <- function(x,p){
#Syntax Processing
#============================================================
#First we check if x is a vector of numbers
if(!is.vector(x) || is.matrix(x) || is.list(x) || !is.numeric(x)){
stop("'x' has to be a vector of numbers.(Non list, non matrix)")
}
if(missing(p)){ #If p is not used, probability is uniform
p <- rep((1/length(x)),length(x))
} else if(!is.vector(p) || is.matrix(p) || is.list(p) || !is.numeric(p)){
stop("'p' has to be a vector of numbers.(Non list, non matrix)") #If p exist, check it is a vector of numbers
} else if(length(p) != length(x)){
stop("'p' and 'x' has to be of the same length")
}
if(sum(p) != 1){ #Warn the user if the total probability does not equal to 1.
warning("Sum of p is not equal to 1, this may cause incorrect calculations.")
}
checker <- p<0
checker2 <- x<0
if(length(checker[checker == TRUE]) > 0){ #Warn the user if they added negative probabilities
warning("p contains negative values, this may cause incorrect calculations.")
}
if(length(checker2[checker2 == TRUE]) > 0){ #Warn the user if they added negative values to x
warning("x contains negative values, this may cause incorrect calculations.")
}
#------------------------------------------------------------
k <- length(x) #Calculating chi.probability requires the degrees of freedom
n <- sum(x) #We need to know how many there are in total for Pearson's Chi-squared statistic
return(sum(((x - n*p)^2)/(n*p))) #Formula to calculate Pearson's Chi-squared statistic
#return(chi.probability(Tt,df = k - 1, n = 100))
}
chi.probability <- function(x,df = 1,n = 100){
#Syntax Processing
#============================================================
if(is.matrix(x) || is.list(x) || length(x)!=1){ #Check that x is a single value
stop("'x' has to be an integer; length=1, non-list, non-matrix")
} else if(!is.numeric(x)){ #checks if x is a number
stop("'x' has to be a number")
}
if(is.matrix(df) || is.list(df) || length(df)!=1){ #Check that df is a single value
stop("'df' has to be an integer; length=1, non-list, non-matrix")
} else if(!is.numeric(df)){ #checks if df is a number
stop("'df' has to be a positive integer")
} else if(df != abs(round(df))){ #checks if df is a positive integer
stop("'df' has to be a positive integer")
}
if(is.matrix(n) || is.list(n) || length(n)!=1){ #Check that n is a single value
stop("'n' has to be an integer; length=1, non-list, non-matrix")
} else if(!is.numeric(n)){ #checks if n is a number
stop("'n' has to be a positive integer")
} else if(n != abs(round(n))){ #checks if n is a positive integer
stop("'n' has to be a positive integer")
}
#------------------------------------------------------------
for (i in 1:length(x)){
variables <- rnorm(n*df) #Generate the random variables for the matrix
matrixNumbers <- matrix(variables, c(n,df)) #Generate the matrix
chi <- numeric() #initialise chi
for(i in 1:n){ #Sum up each row in the matrix to get the chi values.
chi[i] <- sum(matrixNumbers[i,]^2)
}
cdf <- ecdf(chi) #Use the empirical cumulative distribution function
a <- cdf(x) #Now we look at the specific value for x, i.e. P(chi^2 < x)
return(1-a) #Return the probability 1-P(chi^2 < x) = P(chi^2 > x)
}
}
soccer <- read.table("https://raw.githubusercontent.com/haghish/ST516/master/data/gum.txt")
chi.gof(soccer$Number,soccer$expected)
chi.probability(25.66007,19,100)
chi.probability(25.66007,19,1000)
chi.probability(25.66007,19,1000)
chi.probability(25.66007,19,1000)
chi.probability(25.66007,19,1000)
chi.gof(c(1,2,3),(0.25,0.6,0.15))
chi.gof(c(1,2,3),c(0.25,0.6,0.15))
chi.gof(c(1,2,3),c(0.25,0.6,0.15))
chi.gof(c(1,2,3),c(0.25,0.6,0.15))
chi.gof(c(1,2,3))
chi.gof(c(1,4,3))
chi.gof(c(1,4,6))
chi.gof(list())
chi.gof(matrix()
)
chi.gof(c(-1,2.3))
library(roxygen2)
roxygen2::roxygenise()
library(ChaijiExamST522)
roxygen2::roxygenise()
library(ChaijiExamST522)
